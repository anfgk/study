1. React Native란?
React Native는 Facebook(현 Meta)에서 개발한 오픈소스 모바일 앱 프레임워크로, 
JavaScript와 React를 이용해 iOS와 Android 앱을 동시에 개발할 수 있게 해주는 도구이다.

1.1 React Native가 나오게 된 배경(기존 앱 개발 상황)
앱을 열면 웹사이트가 나오는, 즉 앱을 열었을때 웹사이트를 띄우는 형식이었음.

1.2 기존 앱 개발의 문제점
=> 웹사이트를 개발하는 것과 똑같음
=> 웹사이트에서 구현할 수 있는 것이 최대였음(한계O)

1.3 Meta CEO의 철학
"우리는 모바일에서 틀렸다. HTML5에 너무 의존했다."
=> 웹사이트를 개발하는 것으로 앱을 만드는게 아니라 진짜 앱을 개발할 수 있는 프레임워크를 만들어보자!
=> React Native의 탄생

1.4 React + Native
React: 인스타그램처럼 다른 페이지로 넘어갈 때 아주 자연스럽고 유연한 웹앱을 개발할 수 있는 라이브러리
컴포넌트 기반 UI 설계. 상태(state), props 등 사용

Native: 기존처럼 웹을 개발하는 것으로는 Native한, 즉 원초적인 사용자 상호작용, 유연한 페이지 이동 등의 
기능은 개발 못하니깐 좀 더 Native한 기능을 건들고 만들 수 있게 해보자.
네이티브 UI 컴포넌트 사용 (예: Text, Button, View 등)

결합: React 문법으로 네이티브 기능을 사용하는 새로운 패러다임

1.5 특징
크로스 플랫폼	          iOS & Android 동시에 개발 가능
직관적인 문법	          HTML 비슷한 태그 사용: <View>, <Text>, <Image> 등
컴포넌트 기반	          UI를 작은 단위로 쪼개서 관리
핫 리로드	             코드 수정 시 앱 재시작 없이 바로 적용됨
빠른 개발	             웹 개발자가 쉽게 모바일 앱에 진입 가능
네이티브 기능 접근 가능	    카메라, 센서, 위치 등도 접근 가능 (추가 모듈 필요)

1.6 React Native를 쓰는 게 좋은 경우
1. 웹 개발 경험자들이 모바일 앱도 만들고 싶을 때	React 문법 그대로 사용 가능 → 학습 비용 낮음
2. iOS와 Android 앱을 동시에 개발해야 할 때	    코드 재사용률이 높아서 개발 효율 UP
3. MVP/스타트업 초기 앱을 빠르게 만들 때	     개발 속도 빠르고, 빠른 테스트 가능
4. 앱 UI/UX가 비교적 단순할 때	              복잡한 네이티브 기능 없이도 충분히 구현 가능
5. 유지보수와 팀 규모를 줄이고 싶을 때	          하나의 코드베이스로 양쪽 운영 가능

1.7 React Native를 쓰면 안 좋은 경우(주의)
1. 고성능 게임, AR/VR, 실시간 영상처리 앱	    React Native는 성능 한계 있음 → 네이티브 개발 필수
2. 복잡한 네이티브 기능을 많이 써야 할           커스텀 네이티브 모듈 구현 필요 → 개발 난이도 급상승
(ex. 블루투스, 백그라운드 GPS, 기기 센서 등)	
3. 앱 실행 속도와 성능이 매우 중요한 경우	      네이티브에 비해 렌더링 속도나 반응성이 떨어질 수 있음
4. 최신 OS 기능을 바로 반영해야 할 때	        React Native 업데이트 주기보다 OS 변화가 더 빠름
5. 앱 크기가 아주 작아야 하는 경우	            React Native는 런타임 포함으로 기본 앱 크기가 큼 (1020MB 이상)