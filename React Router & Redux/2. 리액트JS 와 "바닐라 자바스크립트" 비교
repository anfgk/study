2. 리액트JS와 "바닐라 자바스크립트" 비교
리액트가 더 단순한 심상 모델을 제공하고 복잡한 웹앱과 웹 사용자 인터페이스를 더 쉽게 구축하기 때문이다.
useState()라는 리액트 함수로 생성하고 제어한다. useState()로 리액트가 관리하는 동적 변수 같은걸 생성하면 
setActiveContentIndex()로 그 변수를 업데이트할 수 있다.

리액트가 이 변수를 감시하며 값이 변할 때마다 HTML 코드를 살피고 조건을 점검해 코드를 전부 실행한 다음
그렇게 생성되는 UI가 이전에 랜더링된 것과 다른지 확인한다.
다른 UI가 필요하면 리액트가 UI를 업데이트한다. 알아서 전부 해준다.
왜냐하면 리액트로 작업할 때는 코드가 선언형으로 작성하기 때문이다.
즉 목표로 하는 UI 상태를 정의할 뿐 거쳐야 할 단계는 정의하지 않는다.
리액트가 과정을 알아서 파악해 필요한 단계를 수행한다. 따라서 리액트 코드는 선언형으로 작성해야 한다. 
이게 리액트 작동 원리이다.

반면 바닐라 자바스크립트 코드는 선언형이 아니라 명령형으로 작성된다.
다시 말해 목표가 아니라 거쳐야할 단계를 정의한다. 단계를 정의하는 건 훨씬 번거롭고 어렵다.
이건 아주 기초적이고 간단한 예시인데도 원하는 동작을 수행하기까지 여러 단계가 필요해서이다.
도중에 단계를 빼먹거나 오류가 끼어들기도 쉽다.
코드를 업데이트 해 네번째 버튼을 다루는것도 쓸데없이 복잡해질 수 있다.
이렇게 단계별 명령을 정의했기 때문에 명령형 방식이라고 부른다.

반면 리액트는 군더더기 없고 작성할 코드가 비교적 짧다.
게다가 UI도 알아서 해준다.
리액트 내부에서 자바스크립트로 UI를 업데이트 하는것이다.
우리가 조건과 목표상태 상태변경 조건만 정의하면 나머지는 리액트가 알아서 해준다.

📈 비교 요약표
정의	            UI 구축을 위한 라이브러리(Facebook 개발)	        순수한 JavaScript(추가 라이브러리 없이)
DOM 조작 방식	     Virtual DOM을 통해 효율적 업데이트	                직접 DOM 조작
상태 관리	         useState, useReducer, Redux 등 활용 가능	     수동으로 변수 관리 필요(let, const 등)
재사용성	         컴포넌트 단위로 재사용 가능	                     재사용하려면 함수로 구조화해야 함
코드 구조	         명확한 컴포넌트 기반 구조	                         구조가 자유롭고 유지보수 어려울 수 있음
러닝 커브	         비교적 높음(JSX, 상태관리, 훅 등 학습 필요)	       낮음(기본 자바스크립트만 알면 됨)
프로젝트 규모 적합성	중대형 프로젝트에 적합	                           소형 프로젝트, 단순한 UI에 적합
렌더링 최적화	      Virtual DOM 덕분에 최적화되어 있음	             복잡한 UI에서는 비효율적일 수 있음
개발 속도	         빠름(컴포넌트 재사용 및 다양한 생태계 활용 가능)	      느림(직접 구조 설계, 상태 관리, 렌더링 구현 필요)
생태계	            방대한 생태계(Next.js, Redux, Tailwind 등과 호환)	별도 생태계 없음, 직접 구현 필요

🔹 React.js
- Virtual DOM: 실제 DOM 대신 가상의 DOM을 사용해 최소한의 변경만 실제 DOM에 적용 → 빠른 렌더링
- JSX: JavaScript + HTML을 결합한 문법으로 컴포넌트 작성
- 컴포넌트 기반: UI를 독립적이고 재사용 가능한 블록으로 구성 가능
- 상태관리: React 내부의 useState, 외부 상태관리 라이브러리 사용 가능

🔹 바닐라 JS
- 직접 DOM 조작: document.querySelector, addEventListener 등 직접 호출
- 직관적이지만 복잡한 UI 구성 시 한계
- 상태 저장 및 UI 갱신을 수동으로 관리해야 함

어떤 걸 선택해야 할까?
단순한 기능이나 프로토타입              바닐라 JS
학습 초기 단계, JS의 기본 원리 이해      바닐라 JS
재사용 가능한 UI, 확장성 있는 프로젝트    React
협업, 유지보수, 생산성을 고려한 개발      React