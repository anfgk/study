5. 변수와 값 다시 보기
자바스크립트 코드에서는 다양한 유형의 값을 다룰 수 있다.
기본적으로 문자열, 숫자, boolean 값이 있고, 특수한 null값이나 undefined 값이 있다.
특정 데이터 컨테이너나 변수가 값이 존재하지 않을 때의 값이다.

그리고 특수한 객체 값도 있다.
자바스크립트에서는 필요한 곳에 값을 생성할 수 있다. 하지만 값을 저장해야 할 일도 많다.

이때 변수를 사용한다. 변수는 단순히 말해 값을 저장하는 데이터 컨테이너이며 원하는 이름으로 할당할 수 있다.
변수에 이름을 할당하고 코드 내에서 이 이름을 식별자로 사용해 변수에 저장된 값을 사용해야 할 때 그 이름을 사용하면 된다.
일반적으로 변수를 사용하면 값을 재사용할 수 있고 코드 가독성이 좋아진다는 이점이 있다.
값을 사용해야 할 곳에서 정의하는 대신 미리 값을 저장해 두면 코드가 깔끔해지고 읽기 쉬워진다.

변수명에는 숫자를 넣을 수 있지만 맨 앞에 넣을 수는 없다.
또한 느낌표나 물음표 같은 특수문자를 사용할 수 없다. 사용될 수 있는 특수 문자는 $와 _뿐이다.
이외에는 원하는 대로 이름을 지으면 된다.

예를 들어 콘솔에 로그를 출력하려면 변수명을 입력하면 해당 값을 사용할 수 있다.
이제 로그를 여러 번 출력하고 싶으면 변수를 재사용하면 된다. 
값을 복사해 대신 넣는 대신 한 번 정의한 다음, 값을 사용하고 싶을때마다 변수를 사용하면 된다.
변수의 값을 변경해야 할 때 한 장소에서만 값을 변경하면 코드에서 변수를 사용하는 다른 모든 장소에서도 값이 자동으로 변경된다는 이점도 있습니다.

변수와 함께 상수도 있다. const 키워드로 생성할 수 있다.
상수는 변수와 마찬가지로 데이터 컨테이너이다.
차이점은 상수에는 값을 다시 할당할 수 없다는 것이다.
새 값을 할당하려고 시도하면, 오류가 발생한다. 상수이므로 읽기 전용이다.

let을 사용하면 = 연산자로 새 값을 할당할 수 있지만
const를 사용하면 새 값을 할당할 수 없다.

자바스크립트를 사용하는 개발자마다 다양한 철학이 있다.
가능하면 const를 많이 사용하는 개발자가 있고, let을 사용하면 타이핑해야 하는 코드가 더 적으므로 let만 사용하는 개발자가 있다.


5.1 변수(Variable)
- 변수는 데이터를 저장하는 이름 붙은 공간이다.
- 나중에 이 변수 이름으로 저장된 값을 꺼내 쓸 수 있다.

자바스크립트 변수 선언 방법
var     예전 방식, 함수 스코프      재할당 가능       아니오(함수 스코프)
let     최신 방식, 블록 스코프      재할당 가능       예(블록 스코프)    
// 소문자로 이름을 시작하고 변수명이 여러 개의 단어로 구성되는 경우 각 단어를 대문자로 시작하고 하이픈이나 공백이 있으면 안된다.
const   상수, 블록 스코프          재할당 불가       예(블록 스코프)

5.2 값(Value)
- 변수에 저장되는 데이터 자체를 뜻한다.
- 자바스크립트에서 값의 종류(데이터 타입)는 여러 가지가 있다.

기본 데이터 타입 (Primitive types)
Number      	숫자 (정수, 실수)        10, 3.14
String          문자열                 "hello", 'React'
Boolean         참 / 거짓              true, false
Null            값이 없음 (명시적 없음)    null
Undefined       값이 할당되지 않음        undefined
Symbol          유일한 식별자            Symbol('id')
BigInt          아주 큰 정수            123456789012345678901n

5.3 객체(Object)
- 여러 값을 하나로 묶거나 복잡한 데이터 저장 가능하다.
- 배열, 함수, 객체 리터럴 등이 객체에 해당된다.

const person = {
  name: 'Jane',
  age: 25,
  isStudent: true
};

5.4 React에서 변수와 값
- React 컴포넌트 내에서 상태를 다룰 때 useState 훅을 사용해서 변수(상태값)와 값을 관리한다.

import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);  // count는 변수, 0은 초기값

  return (
    <div>
      <p>현재 카운트: {count}</p>
      <button onClick={() => setCount(count + 1)}>증가</button>
    </div>
  );
}