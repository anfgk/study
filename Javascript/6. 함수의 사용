6. 함수의 사용

6.1 function을 활용한 함수
호이스팅(끌어올림)이 됨 → 선언보다 먼저 호출해도 동작함
함수 이름이 명확하고, 일반적인 함수 선언에 적합
기본틀

function 함수이름(매개변수) {
    기능
    return 출력값
}

함수이름(매개변수 값)

문제
문제1. 값에 1를 더하는 함수

function plus(x) {
    return x + 1
}

plus(10) // 11

문제2. 값을 포함하여 인사 문구를 출력하는 함수 

function greet(name) {
    console.log("hello, I'm ", name) 
}

greet("JeongHa")

6.2 const를 활용한 함수
호이스팅이 되지 않음 → 선언 전에 호출하면 에러
문법이 간결하고, 익명 함수나 콜백 함수에 자주 사용됨
기본틀

const 함수이름 = (매개변수) => {
    기능
    return 출력값
}

함수이름(매개변수 값)

문제
문제1. 값에 1를 더하는 함수

const plus = (x) => {
    return x + 1
}

plus(10)

문제2. 값을 포함하여 인사 문구를 출력하는 함수 

const greet (name) => {
    console.log("hello, I'm ", name)
}

greet("JeongHa")

6.3 function과 const의 차이점

항목                function                const
선언방식             함수 선언식               함수 표현식
이름               함수 이름이 있음         보통 변수에 저장됨
호이스팅         O(선언 전에 호출 가능)     X(선언 후에만 호출 가능)
this 바인딩         동적으로 바뀜                고정됨
사용 용도        일반 함수, 재사용 함수     콜백 함수, 짧은 함수, 익명 함수 등
간결성             다소 길 수 있음           문법이 짧고 간단함


function => 일반 함수, 호이스팅 필요할 때 사용
const + 화살표 함수 => 간결한 표현, 콜백 함수, this 유지 필요할 때 사용